// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
  previewFeatures = ["dataProxy", "referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(USER)
  forms         Form[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Tag {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")
  name            String   @unique
  color           String
  forms           TagsOnForm[]
}

model Form {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  userId          String      @map("user_id")
  name            String      @unique
  tags            TagsOnForm[]
  about           String?
  secureCode      String      @map("secure_code")
  actionName      String?     @default("logger") @map("action_name")
  schema          Json?
  records         FormRecord[]
  user            User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: Cascade)
}

model TagsOnForm {
  form       Form     @relation(fields: [formId], references: [id])
  formId     String   @map("form_id")
  tag        Tag      @relation(fields: [tagId], references: [id])
  tagId      Int      @map("tag_id")
  assignedAt DateTime @default(now()) @map("assigned_at")

  @@id([tagId, formId])
}

model FormRecord {
  id              String      @id @default(cuid())
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  form            Form        @relation(fields: [formId], references: [id])
  formId          String      @map("form_id")
  data            Json
}
